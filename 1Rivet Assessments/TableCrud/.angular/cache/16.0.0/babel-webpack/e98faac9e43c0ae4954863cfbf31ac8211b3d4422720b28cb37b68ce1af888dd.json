{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ApiService {\n  // url='http://localhost:3000'\n  // constructor(private http: HttpClient) { }\n  // getUsers() {\n  //   return this.http.get(this.url + '/posts');\n  // }\n  // addemployee(name: string, email: string, city: string, pincode: number, phonenumber: number){\n  //   debugger\n  //   const requestBody = {\n  //     id: Math.floor(Math.random() * 90 + 10),\n  //     name: name,\n  //     email : email,\n  //     city : city,\n  //     pincode: pincode,\n  //     country: pincode\n  //   }\n  //   return this.http.post<datamodel>(\" http://localhost:3000/posts\", data)\n  //   // return this.http.post(this.url + '/posts', requestBody);\n  // }\n  // removeUser(id:number){\n  //   return this.http.delete(this.url + '/posts/' + id);\n  // }\n  constructor(http) {\n    this.http = http;\n  }\n  addemployee(data) {\n    // debugger\n    return this.http.post(\" http://localhost:3000/posts\", data);\n    // debugger\n  }\n  //get employee\n  getemployee() {\n    return this.http.get(\"http://localhost:3000/posts\");\n  }\n  //delete \n  deleteemployee(id) {\n    return this.http.delete(\"http://localhost:3000/posts/\" + id);\n  }\n  //Fetch\n  fetchdata(id) {\n    return this.http.get(\"http://localhost:3000/posts/\" + id);\n  }\n  //Update\n  updateemployee(data, id) {\n    return this.http.put(\"http://localhost:3000/posts/\" + id, data);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});\nexport { ApiService };","map":{"version":3,"names":["ApiService","constructor","http","addemployee","data","post","getemployee","get","deleteemployee","id","delete","fetchdata","updateemployee","put","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jaitry.patel\\Desktop\\Tasks\\1Rivet Assessments\\TableCrud\\src\\app\\api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { datamodel } from './employee/list/model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  // url='http://localhost:3000'\r\n  // constructor(private http: HttpClient) { }\r\n  // getUsers() {\r\n  //   return this.http.get(this.url + '/posts');\r\n  // }\r\n\r\n  // addemployee(name: string, email: string, city: string, pincode: number, phonenumber: number){\r\n  //   debugger\r\n  //   const requestBody = {\r\n  //     id: Math.floor(Math.random() * 90 + 10),\r\n  //     name: name,\r\n  //     email : email,\r\n  //     city : city,\r\n  //     pincode: pincode,\r\n  //     country: pincode\r\n  //   }\r\n  //   return this.http.post<datamodel>(\" http://localhost:3000/posts\", data)\r\n  //   // return this.http.post(this.url + '/posts', requestBody);\r\n  // }\r\n\r\n  // removeUser(id:number){\r\n  //   return this.http.delete(this.url + '/posts/' + id);\r\n  // }\r\n\r\n  constructor(private http: HttpClient) { }\r\n  addemployee(data: datamodel) {\r\n    // debugger\r\n    return this.http.post<datamodel>(\" http://localhost:3000/posts\", data)\r\n    // debugger\r\n  }\r\n\r\n  //get employee\r\n  getemployee(){\r\n    return this.http.get<datamodel[]>(\"http://localhost:3000/posts\");\r\n  }\r\n\r\n  //delete \r\n  deleteemployee(id:number){\r\n    return this.http.delete<datamodel[]>(\"http://localhost:3000/posts/\" +id);\r\n  }\r\n\r\n  //Fetch\r\n  fetchdata(id: number){\r\n    return this.http.get<datamodel>(\"http://localhost:3000/posts/\"+id)\r\n  }\r\n\r\n  //Update\r\n  updateemployee(data: datamodel, id: number){\r\n    return this.http.put<datamodel>(\"http://localhost:3000/posts/\"+id, data);\r\n  }\r\n}\r\n\r\n\r\n"],"mappings":";;AAIA,MAGaA,UAAU;EACrB;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EACxCC,WAAWA,CAACC,IAAe;IACzB;IACA,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAY,8BAA8B,EAAED,IAAI,CAAC;IACtE;EACF;EAEA;EACAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAc,6BAA6B,CAAC;EAClE;EAEA;EACAC,cAAcA,CAACC,EAAS;IACtB,OAAO,IAAI,CAACP,IAAI,CAACQ,MAAM,CAAc,8BAA8B,GAAED,EAAE,CAAC;EAC1E;EAEA;EACAE,SAASA,CAACF,EAAU;IAClB,OAAO,IAAI,CAACP,IAAI,CAACK,GAAG,CAAY,8BAA8B,GAACE,EAAE,CAAC;EACpE;EAEA;EACAG,cAAcA,CAACR,IAAe,EAAEK,EAAU;IACxC,OAAO,IAAI,CAACP,IAAI,CAACW,GAAG,CAAY,8BAA8B,GAACJ,EAAE,EAAEL,IAAI,CAAC;EAC1E;;AAlDWJ,UAAU,C;mBAAVA,UAAU,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAVjB,UAAU,C;SAAVA,UAAU;EAAAkB,OAAA,EAAVlB,UAAU,CAAAmB,IAAA;EAAAC,UAAA,EAFT;AAAM;SAEPpB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}